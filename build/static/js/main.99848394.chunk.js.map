{"version":3,"sources":["Ro.js","serviceWorker.js","index.js"],"names":["Ro","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","copyToClipboard","el","document","createElement","value","concat","state","color1","color2","body","appendChild","select","execCommand","removeChild","setState","copied","btnText","colorChange","bind","assertThisInitialized","event","target","name","react_default","a","className","style","background","type","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Ro","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAyEeA,qBArEd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA8BDI,gBAAgB,WACJ,IAAIC,EAAKC,SAASC,cAAc,YAC/BF,EAAGG,MAAH,sDAAAC,OACWZ,EAAKa,MAAMC,OADtB,KAAAF,OACgCZ,EAAKa,MAAME,OAD3C,KAEAN,SAASO,KAAKC,YAAYT,GAC1BA,EAAGU,SACHT,SAASU,YAAY,QACrBV,SAASO,KAAKI,YAAYZ,GAC1BR,EAAKqB,SAAS,CACbC,QAAO,EACPC,QAAQ,yBAvCrBvB,EAAKa,MAAM,CACVC,OAAO,UACPC,OAAO,UACPO,QAAO,EACPC,QAAQ,iBAETvB,EAAKwB,YAAYxB,EAAKwB,YAAYC,KAAjBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KARLA,2EAWD2B,GACa,WAArBA,EAAMC,OAAOC,KACf1B,KAAKkB,SAAS,CACdP,OAAOa,EAAMC,OAAOjB,MACpBW,QAAO,EACPC,QAAQ,kBAGqB,WAAtBI,EAAMC,OAAOC,MACpB1B,KAAKkB,SAAS,CACdN,OAAOY,EAAMC,OAAOjB,MACpBW,QAAO,EACPC,QAAQ,mDAsBT,OAAOO,EAAAC,EAAArB,cAAA,OAAKsB,UAAU,OAAOC,MAAO,CAACC,WAAU,2BAAAtB,OACnBT,KAAKU,MAAMC,OADQ,aAAAF,OAE5CT,KAAKU,MAAME,UACbe,EAAAC,EAAArB,cAAA,uDACCoB,EAAAC,EAAArB,cAAA,OAAKsB,UAAU,SAEfF,EAAAC,EAAArB,cAAA,SAAOyB,KAAK,QACZN,KAAK,SACLlB,MAAOR,KAAKU,MAAMC,OAClBsB,SAAUjC,KAAKqB,cACfM,EAAAC,EAAArB,cAAA,SAAOyB,KAAK,QACZN,KAAK,SACLlB,MAAOR,KAAKU,MAAME,OAClBqB,SAAUjC,KAAKqB,cACfM,EAAAC,EAAArB,cAAA,gDAAwCP,KAAKU,MAAMC,OAAnD,IAA4DX,KAAKU,MAAME,OAAvE,KACAe,EAAAC,EAAArB,cAAA,UACA2B,QAASlC,KAAKI,iBACbJ,KAAKU,MAAMU,kBA/DCe,cCSGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOf,EAAAC,EAAArB,cAACoC,EAAD,MAAQrC,SAASsC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.99848394.chunk.js","sourcesContent":["import React ,{Component} from 'react';\r\nimport './Main.css';\r\n\r\nclass Ro extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\tcolor1:\"#990099\",\r\n\t\t\tcolor2:\"#000000\",\r\n\t\t\tcopied:false,\r\n\t\t\tbtnText:\"click to copy\"\r\n\t\t}\r\n\t\tthis.colorChange=this.colorChange.bind(this);\r\n\r\n\t}\r\n\tcolorChange(event){\r\n\t\tif(event.target.name ===\"color1\"){\r\n\t\t\tthis.setState({\r\n\t\t\tcolor1:event.target.value,\r\n\t\t\tcopied:false,\r\n\t\t\tbtnText:\"click to copy\"\r\n\t\t});\r\n\t\t}\r\n\t\telse if(event.target.name === \"color2\"){\r\n\t\t\tthis.setState({\r\n\t\t\tcolor2:event.target.value,\r\n\t\t\tcopied:false,\r\n\t\t\tbtnText:\"click to copy\"\r\n\t\t});\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\r\n\t}\r\n\tcopyToClipboard=()=>{\r\n             let el = document.createElement('textarea');\r\n              el.value =`background:linear-gradient\r\n              (to left,${this.state.color1},${this.state.color2})` ;\r\n              document.body.appendChild(el);\r\n              el.select();\r\n              document.execCommand('copy');\r\n              document.body.removeChild(el);\r\n              this.setState({\r\n              \tcopied:true,\r\n              \tbtnText:\"copied to clipboard\"\r\n              })     \r\n\t}\r\n\trender(){\r\n\t\treturn(<div className=\"main\" style={{background:\r\n\t\t\t`linear-gradient(to left,${this.state.color1},\r\n\t\t\t${this.state.color2}`}}>\r\n\t\t\t<h1>Background Gradient generator using react</h1>\r\n\t\t\t\t<div className=\"inner\">\r\n\r\n\t\t\t\t<input type=\"color\" \r\n\t\t\t\tname=\"color1\" \r\n\t\t\t\tvalue={this.state.color1} \r\n\t\t\t\tonChange={this.colorChange} />\r\n\t\t\t\t<input type=\"color\" \r\n\t\t\t\tname=\"color2\" \r\n\t\t\t\tvalue={this.state.color2} \r\n\t\t\t\tonChange={this.colorChange} />\r\n\t\t\t\t<h1>background:linear-gradient(to left,{this.state.color1},{this.state.color2})</h1>\r\n\t\t\t\t<button \r\n\t\t\t\tonClick={this.copyToClipboard}>\r\n\t\t\t\t{this.state.btnText}</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default Ro;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Ro from './Ro';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Ro />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}